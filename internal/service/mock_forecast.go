// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/softstone1/fl/internal/service (interfaces: Forecast)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_forecast.go -package=service github.com/softstone1/fl/internal/service Forecast
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockForecast is a mock of Forecast interface.
type MockForecast struct {
	ctrl     *gomock.Controller
	recorder *MockForecastMockRecorder
	isgomock struct{}
}

// MockForecastMockRecorder is the mock recorder for MockForecast.
type MockForecastMockRecorder struct {
	mock *MockForecast
}

// NewMockForecast creates a new mock instance.
func NewMockForecast(ctrl *gomock.Controller) *MockForecast {
	mock := &MockForecast{ctrl: ctrl}
	mock.recorder = &MockForecastMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForecast) EXPECT() *MockForecastMockRecorder {
	return m.recorder
}

// GetRandomForecast mocks base method.
func (m *MockForecast) GetRandomForecast(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomForecast", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomForecast indicates an expected call of GetRandomForecast.
func (mr *MockForecastMockRecorder) GetRandomForecast(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomForecast", reflect.TypeOf((*MockForecast)(nil).GetRandomForecast), ctx)
}
